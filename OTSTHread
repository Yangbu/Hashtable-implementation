// package whatever; // don't place package name!

import java.io.*;
import java.util.*;
import java.time.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
/*

Multi-thread Printer from different sources
*/
class MyCode {
    private Lock lock = new ReentrantLock();
    private Condition condition = lock.newCondition();

    public static void main(String[] args) {
        MyCode abc = new MyCode();

        PrintThread a = abc.new PrintThread("network", true, 300);
        PrintThread b = abc.new PrintThread("USB", false, 200);
        PrintThread c = abc.new PrintThread("operator", false,500);

        a.setNext(b);
        b.setNext(c);
        c.setNext(a);

        ExecutorService executor = Executors.newFixedThreadPool(3);// 通过线程池执行
        for (int i = 0; i < 3; i++) {
            executor.execute(a);
            executor.execute(b);
            executor.execute(c);
        }
        executor.shutdown();
    }

    class PrintThread implements Runnable {
        private String name;

        private PrintThread next;

        private boolean execute;
      
        private int time;

        public PrintThread(String name, boolean execute, int time) {
            this.name = name;
            this.execute = execute;
            this.time = time;
        }

        public PrintThread(String name, PrintThread next, boolean execute) {
            this.name = name;
            this.next = next;
            this.execute = execute;
        }

        public void run() {
            lock.lock();
            try {
                while (true) {

                    if (execute) {
                        print();
                        execute = false;
                        next.setExecute(true);
                        try {
                            Thread.sleep(time);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                        condition.signalAll();
                        break;
                    } else {
                        try {
                             condition.await();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            } finally {
                lock.unlock();
            }
        }

        public void print() {
            System.out.println(name);
        }

        public void setExecute(boolean execute) {
            this.execute = execute;
        }

        public void setNext(PrintThread next) {
            this.next = next;
        }
    }
}

